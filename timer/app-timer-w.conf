# only allowed log on period
#logOnAllowedAfter=00:01
#logOnAllowedNotAfter=23:59
logOnAllowedAfter=15:00
#
logOnAllowedNotAfter=21:31

# minutes - deduction vs reward
lossNumDays=3
### loss format : lossDateStart lossMinutes lossNumDays(optional as default)
loss.1=2020-09-01        # 
loss.2=2020-09-01        # 
loss.3=2020-09-01        # 
loss.4=2020-09-01  10    # come down timer
loss.5=2020-09-01  5     # challenge/bother for nothing
loss.6=2020-09-02  5     # didnot report
loss.7=2020-09-03  5     # Watching TV at breakfast
loss.8=2020-09-01        # 
loss.9=2020-09-01        # 

rewardNumDays=1
### reward format : dateStart minutes numDays(optional as default) X (means not applicable)
reward.1=2020-08-30  60  30  x  # Full assignment (extra)
reward.2=2020-09-01  30  30  x  # HALF assignment (extra)
reward.3=2020-09-01  10  1   x  # making noodle
reward.4=2020-09-02  10  1   x  # serve us at lunch
reward.5=2020-09-01  5   1   x  # SAMPLE
reward.6=2020-09-01  5   1   x  # SAMPLE
reward.7=2020-09-01  5   1   x  # SAMPLE
reward.8=2020-09-01  5   1   x  # SAMPLE
reward.9=2020-09-01  5   1   x  # SAMPLE







package com.example;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

public class Solution {
	// find any elements combination out of [1,2,3,5,6,8] who sum value is 19 e.g. 1,2,3,5,8
	public static void main(String[] args) {
		solution(new int[]{1,2,3,5,6,8}, 10);
	}

	private static final List<Integer> numbers = new LinkedList<>();
	private static boolean solved = false;

	private static void solution(int[] arr, int target) {
		for (int i = 0; i < arr.length && !solved; i++) {
			int cur = arr[i];
			numbers.add(cur);
			findSolution(getRestExceptFirst(arr), target - cur);
			if (solved){
				System.out.println(numbers);
			}else{
				numbers.clear();
			}
		}

	}

	private static void findSolution(List<Integer> nums, int target) {
		if (target <= 0){
			return;
		}
		if (nums.contains(target)){
			numbers.add(target);
			solved = true;
		}
		if (!solved){
			int cur = nums.get(0);
			numbers.add(cur);
			int newTarget = target - cur;
			findSolution(getRestExceptFirst(nums), newTarget);
			if (!solved){
				removeLast();
				findSolution(getRestExceptFirst(nums), newTarget);
			}
		}
		if (!solved){
			removeLast();
		}
	}

	private static void removeLast() {
		if (numbers.size() > 0)
			numbers.remove(numbers.size() - 1);
	}

	private static int getSumExistingNumbers(){
		return numbers.stream().mapToInt(Integer::intValue).sum();
	}

	private static List<Integer> getRestExceptFirst(int[] arr) {
		return Arrays.stream(arr).boxed().skip(1).collect(Collectors.toCollection(LinkedList::new));
	}
	private static List<Integer> getRestExceptFirst(List<Integer> arr) {
		return arr.stream().skip(1).collect(Collectors.toCollection(LinkedList::new));
	}
}

